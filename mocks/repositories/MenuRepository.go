// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/ad3n/resto/models"
	mock "github.com/stretchr/testify/mock"
)

// MenuRepository is an autogenerated mock type for the MenuRepository type
type MenuRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: id
func (_m *MenuRepository) Find(id int) (models.Menu, error) {
	ret := _m.Called(id)

	var r0 models.Menu
	if rf, ok := ret.Get(0).(func(int) models.Menu); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Menu)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *MenuRepository) FindAll() ([]models.Menu, error) {
	ret := _m.Called()

	var r0 []models.Menu
	if rf, ok := ret.Get(0).(func() []models.Menu); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Saves provides a mock function with given fields: menus
func (_m *MenuRepository) Saves(menus ...*models.Menu) error {
	_va := make([]interface{}, len(menus))
	for _i := range menus {
		_va[_i] = menus[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*models.Menu) error); ok {
		r0 = rf(menus...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
